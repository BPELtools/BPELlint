<toParts> or <fromParts> are not allowed
@variable or <fromParts> is missing
@variable or <toParts> is missing
@inputVariable or <toParts> for <invoke> is missing
@inputVariable/<toPart> and @outputVariable/<fromPart> for <invoke> is missing
@@@
One-way invocation requires (<invoke>) only the inputVariable (or its equivalent <toPart> elements) since a response is not expected as part of the operation. Request-response invocation requires both an inputVariable (or its equivalent <toPart> elements) and an outputVariable (or its equivalent <fromPart> elements). If a WSDL message definition does not contain any parts, then the associated attributes variable, inputVariable or outputVariable, MAY be omitted,and the <fromParts> or <toParts> construct MUST be omitted.
@@@
$messageActivity = <receive>|<reply>|<invoke>|<onMessage>|<onEvent>



FOREACH $messageActivity
	IF hasNoCorrespondingMessagePart($messageActivity)
		FAIL_toPartsOrfromPartsNotAllowed IF ($messageActivity CONTAINS <toParts>) OR ($messageActivity CONTAINS <fromParts>)
	ELSE
		IF $messageActivity EQUALS <reply>
			FAIL_missingVariableToPart IF
				$messageActivity@variable IS_MISSING AND $messageActivity<toParts> IS_MISSING
			
		IF $messageActivity EQUALS <receive>|<onMessage>|<onEvent>
			FAIL_missingVariableFromPart IF 
				$messageActivity@variable IS_MISSING AND $messageActivity<fromParts> IS_MISSING
			
		IF $messageActivity EQUALS <invoke>
			SET $operation TO correspondingOperation($messageActivity)
			IF isOneWay($operation) 
				FAIL_inputVarOrToPartMissing IF 
					$messageActivity@inputVariable IS_MISSING AND $messageActivity<toParts> IS_MISSING
			IF isRequestResponse($operation) 
				FAIL_toPartAndFromPartMissing IF (
					$messageActivity@inputVariable IS_MISSING AND $messageActivity<toPart> IS_MISSING) 
					OR 
					($messageActivity@outputVariable IS_MISSING AND $messageActivity<fromPart> IS_MISSING)



hasNoCorrespondingMessagePart($messageActivity) -> boolean
	SET	$operation TO correspondingOperation($messageActivity)

	IF $messageActivity EQUALS <reply>
		SET	$outputMessage TO correspondingMessage($operation, 'output')
	IF $messageActivity EQUALS <receive>|<onMessage>|<onEvent>
		SET	$inputMessage TO correspondingMessage($operation, 'input')
	IF $messageActivity EQUALS <invoke>
		IF isOneWay($operation) 
			SET	$inputMessage TO correspondingMessage($operation, 'input')
		IF isRequestResponse($operation)
			SET	$inputMessage TO correspondingMessage($operation, 'input')
			SET	$outputMessage TO correspondingMessage($operation, 'output')  

	IF $inputMessage CONTAINS <part> OR $outputMessage CONTAINS <part>
		RETURN 'false'
	ELSE
		RETURN 'true'

correspondingMessage: $operation, $messageForm -> wsdl:<message>
	$operation |=>
		IF $operation$messageForm@message EQUALS wsdl:<message>@name
	RETURN wsdl:<message>
	
correspondingOperation: $messageActivity -> wsdl:<portType><operation>
	SET $partnerLink TO correspondingPartnerlink($messageActivity)
	=>| RETURN correspondingPortTypeOperation($partnerLink, $messageActivity@operation)

correspondingPartnerLink: $messageActivity -> <partnerLink>
 	FOREACH <partnerLinks>
		IF <partnerLink>@name EQUALS $messageActivity@partnerLink
			RETURN <partnerLink>

correspondingPortTypeOperation(<partnerLink>, $messageActivity@operation) -> wsdl:<portType><operation>
	<partnerLink>	|=>
		IF wsdl:<partnerLinkType>@name EQUALS <partnerLink>@partnerLinkType	
    => wsdl:<partnerLinkType>
		IF wsdl:<partnerLinkType><role> EQUALS <partnerLink>@partnerRole
	=> wsdl:<partnerLinkType><role>
		IF wsdl:<partnerLinkType><role>@portType EQUALS wsdl:<portType>@name
    => wsdl:<portType>
		IF wsdl:<portType><operation> EQUALS $messageActivity@operation
	=>| RETURN wsdl:<portType><operation>

isRequestResponse: wsdl:<operation> -> boolean
	RETURN wsdl:<operation><input> EXISTS AND (wsdl:<operation><input> BEFORE wsdl:<operation><output>)

isOneWay: wsdl:<operation> -> boolean
	RETURN <input> EXISTS AND <output> EXISTS NOT
	
@@@
EmptyMessage-Invoke-FromParts.bpel,\\ TestPartner-MessageWithoutParts.wsdl:
BPEL has \texttt{<invoke><fromParts>}, but the corresponding WSDL \texttt{<message>} definition does not contain any parts.
EmptyMessage-Invoke-ToParts-FromParts.bpel,\\ TestPartner-MessageWithoutParts.wsdl:
BPEL has \texttt{<invoke><toParts>} and \texttt{<fromParts>}, but the corresponding  WSDL \texttt{<message>} definition does not contain any parts.
EmptyMessage-Invoke-ToParts.bpel,\\ TestPartner-MessageWithoutParts.wsdl:
BPEL has \texttt{<invoke><toParts>}, but the corresponding WSDL \texttt{<message>} definition does not contain any parts.
EmptyMessage-OnEvent-FromParts.bpel,\\ TestInterface-MessageWithoutParts.wsdl:
Contains a \texttt{<onEvent>} with a \texttt{<fromParts>}, but corresponding WSDL \texttt{<message>} definition does not contain any parts.
EmptyMessage-OnMessage-FromParts.bpel,\\ TestInterface-MessageWithoutParts.wsdl:
Contains an \texttt{<onMessage>} with a \texttt{<fromParts>}, but corresponding WSDL \texttt{<message>} definition does not contain any parts.
EmptyMessage-Receive-FromParts.bpel,\\ TestInterface-MessageWithoutParts.wsdl:
Contains a \texttt{<reply>} with a \texttt{<fromParts>}, but corresponding WSDL \texttt{<message>} definition does not contain any parts.
EmptyMessage-Reply-ToParts.bpel,\\ TestInterface-MessageWithoutParts.wsdl:
Contains a \texttt{<reply>} with a \texttt{<toParts>}, but corresponding WSDL \texttt{<message>} definition does not contain any parts.
Invoke-OneWay-NoInputVariable-NoToParts.bpel:
One-way \texttt{<invoke>} operation with neither \texttt{@inputVariable} nor \texttt{<toPart>} defined.
Invoke-RequestResponse-NoInputOutputVariables-NoToFromParts.bpel:
Request-response \texttt{<invoke>} operation with neither \texttt{@inputVariable} and \texttt{@outputVariable} nor \texttt{<toParts>} or \texttt{<fromParts>} defined.
Invoke-RequestResponse-NoInputVariable-NoToParts.bpel:
Request-response \texttt{<invoke>} operation with neither \texttt{@inputVariable} nor \texttt{<toParts>} defined.
Invoke-RequestResponse-NoOutputVariable-NoFromParts.bpel:
Request-response \texttt{<invoke>} operation with neither \texttt{@outputVariable} nor \texttt{<fromParts>} defined.
NoVariable-NoFromPart-OnEvent.bpel:
The \texttt{<onMessage>} activity does contain neither \texttt{@variable} attribute nor \texttt{<fromParts>}.
NoVariable-NoFromPart-OnMessage.bpel:
The \texttt{<onMessage>} activity does contain neither \texttt{@variable} attribute nor \texttt{<fromParts>}.
NoVariable-FromPart-Receive.bpel:
The \texttt{<receive>} activity does contain neither \texttt{@variable} attribute nor \texttt{<fromParts>}.
NoVariable-NoToPart-Reply.bpel:
The \texttt{<reply>} activity does contain neither \texttt{@variable} attribute nor \texttt{<toParts>}.
NoVariable-NoToPart-NoFromPart-ReceiveReply.bpel:
The \texttt{<receive>} activity does contain neither \texttt{@variable} attribute nor \texttt{<fromParts>} and the \texttt{<reply>} neither \texttt{@variable} attribute nor \texttt{<toParts>}.
@@@
The rule \textit{SA00047} ensures that variables associated with the WSDL message are used correctly within the following message activities: \texttt{<receive>}, \texttt{<reply>}, \texttt{<invoke>}, \texttt{<onMessage>}, \texttt{<onEvent>}.

The \texttt{<invoke>} activity requires an \texttt{inputVariable} attribute or an \texttt{<toParts>} element, if the corresponding \texttt{<operation>} uses an \textit{one-way message exchange pattern}.
In case of a \textit{request-response message exchange pattern} both \texttt{inputVariable} or \texttt{<toParts>} and \texttt{outputVariable} or \texttt{<fromParts>} are required. For more details about the \textit{message exchange pattern}, see section \ref{SA00046}.

The \texttt{<receive>}, \texttt{<onMessage>} and \texttt{<onEvent>} activities require either a \texttt{variable} attribute or a \texttt{<fromParts>} element.
The \texttt{<reply>} activity requires either a \texttt{variable} attribute or a \texttt{<toParts>} element.

If the corresponding WSDL \texttt{<message>} contains only one \texttt{<part>} element, then both \texttt{<fromParts>} and \texttt{<toParts>} are disallowed within any of the above-mentioned activities. 
But there is no usage restriction to the \texttt{variable}, \texttt{inputVariable} and \texttt{outputVariable} attributes.

First of all, the algorithm searches for the corresponding WSDL \textit{input} and/or \textit{output} \texttt{<message>} in each message activity.
The algorithm looks for a WSDL input message if the current message activity is an \texttt{one-way \texttt{<invoke>}}, \texttt{<receive>}, \texttt{<onMessage>} or \texttt{<onEvent>} activity and for an \textit{output message} if the message activity is a \texttt{<reply>} activity.
In case of having a \textit{request-response \texttt{<invoke>}} activity the algorithm  searches for both input and output message.

If the WSDL \texttt{<message>} found has only one part, then the algorithm failed if there is a \texttt{<toParts>} and/or a \texttt{<fromParts>} element within the message activity.

Otherwise, the algorithm checks if the message activity is:
\begin{itemize}
	\item  \texttt{<reply>} activity: It failed if both the variable attribute and the \texttt{<toParts>} element are missing.
	\item  \texttt{<receive>}, \texttt{<onMessage>} or \texttt{<onEvent>} activity: It failed if both the variable attribute and the \texttt{<fromParts>} element are missing.
	\item  \textit{one-way} \textit{ \texttt{<invoke>}} activity: It failed if both the inputVariable and the \texttt{<toParts>} element are missing.
	\item  \textit{response-request} \textit{\texttt{<invoke>}} activity: It failed if both the inputVariable (or \texttt{<toParts>}) and the \texttt{outputVariable} (or \texttt{<fromParts>}) are missing.
	\end{itemize}