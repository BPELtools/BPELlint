<?xml version="1.0" encoding="UTF-8"?>
<process
    name="prototype-ebBP-BT-Responder"
    targetNamespace="http://lspi.wiai.uniba.de/ebBP-prototype/bpel/Responder"
    xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/bpel/Responder"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
    xmlns:sxt="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Trace" 
    xmlns:sxed="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Editor"
    xmlns:sxeh="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/ErrorHandling"
    xmlns:ns0="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/correlation-1-0"
    xmlns:sxed2="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/Editor2"
    xmlns:ns1="http://lspi.wiai.uniba.de/ebBP-prototype/xsd/header-1-0"
    xmlns:ns2="urn:rosettanet:specification:interchange:PurchaseOrderConfirmationNotification:dtdbase:01.00"
    xmlns:procFaults="urn:rosettanet:specification:interchange:processFaults:1.0"
    xmlns:ns3="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendClient"
    xmlns:ns4="http://docs.oasis-open.org/ebxml-bp/ebbp-signals-2.0"
    xmlns:sxxf="http://www.sun.com/wsbpel/2.0/process/executable/SUNExtension/XPathFunctions"
    xmlns:ns5="http://lspi.wiai.uniba.de/ebBP-prototype/xsd/controlMsg-1-0">
    <import namespace="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20Responder" location="wsdl/PIP3A20Responder.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/correlation-1-0" location="wsdl/Correlation-composable.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" location="wsdl/PIP3A20Requestor.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendClient" location="wsdl/PIP3A20ResponderBackendClient.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" location="wsdl/PIP3A20ResponderBackendCallback.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRAC" location="wsdl/PIP3A20ResponderRAC.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRACResult" location="wsdl/PIP3A20ResponderRACResult.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterClient" location="wsdl/PIP3A20ResponderMasterClient.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <import namespace="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" location="wsdl/PIP3A20ResponderMasterCallback.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"/>
    <partnerLinks>
        <partnerLink name="FromMaster" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterClient" partnerLinkType="tns:PIP3A20ResponderMasterClient" myRole="PIP3A20ResponderMasterClientPortTypeRole"/>
        <partnerLink name="FromRAC" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRACResult" partnerLinkType="tns:PIP3A20ResponderRACResult" myRole="PIP3A20ResponderRACResultPortTypeRole"/>
        <partnerLink name="ToRAC" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRAC" partnerLinkType="tns:PIP3A20ResponderRAC" partnerRole="PIP3A20ResponderRACPortTypeRole"/>
        <partnerLink name="ToBackend" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" partnerLinkType="tns:PIP3A20ResponderBackendCallback" partnerRole="PIP3A20ResponderBackendCallbackPortTypeRole"/>
        <partnerLink name="FromBackend" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendClient" partnerLinkType="tns:PIP3A20ResponderBackendClient" myRole="PIP3A20ResponderBackendClientPortTypeRole"/>
        <partnerLink name="ToRequestor" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" partnerLinkType="tns:PIP3A20Requestor" partnerRole="PIP3A20RequestorPortTypeRole"/>
        <partnerLink name="ToMaster" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" partnerLinkType="tns:PIP3A20ResponderMasterCallback" partnerRole="PIP3A20ResponderMasterCallbackPortTypeRole"/>
        <partnerLink name="FromRequestor" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20Responder" partnerLinkType="tns:PIP3A20Responder" myRole="PIP3A20ResponderPortTypeRole"/>
    </partnerLinks>
    <variables>
        <variable name="TxResultOpIn" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" messageType="tns:txResultMsg"/>
        <variable name="TxStartOpIn" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterClient" messageType="tns:txStartMsg"/>
        <variable name="Pip3A20PurchaseOrderConfirmationNotificationOpIn" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20Responder" messageType="tns:Pip3A20PurchaseOrderConfirmationNotificationMsg"/>
        <variable name="partnerErrToBackend" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" messageType="tns:ExceptionMsg"/>
        <variable name="raDeliveryErrToBackend" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" messageType="tns:ExceptionMsg"/>
        <variable name="aaDeliveryErrToBackend" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" messageType="tns:ExceptionMsg"/>
        <variable name="illegalStateErrToBackend" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" messageType="tns:ExceptionMsg"/>
        <variable name="raDeliveryErrToRequestor" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" messageType="tns:ExceptionMsg"/>
        <variable name="aaDeliveryErrToRequestor" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" messageType="tns:ExceptionMsg"/>
        <variable name="cclErrToRequestor" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" messageType="tns:ExceptionMsg"/>
        <variable name="illegalStateErrToRequestor" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" messageType="tns:ExceptionMsg"/>
        <variable name="aaeToRequestor" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" messageType="tns:ExceptionMsg"/>
        <variable name="raeToRequestor" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" messageType="tns:ExceptionMsg"/>
        <variable name="mainScopeSuccess" type="xsd:boolean"/>
        <variable name="raDelivery" type="xs:boolean"/>
        <variable name="aaDelivery" type="xs:boolean"/>
        <variable name="maxRetries" type="xsd:int"/>
        <variable name="errCount" type="xsd:int"/>
    </variables>
    <correlationSets>
        <correlationSet name="corrSetTransaction" properties="ns0:prop_CollaborationIdentifier"/>
    </correlationSets>
    <faultHandlers>
        <catch faultName="procFaults:partnerException">
            <sequence name="partnerErrSeq">
                <sxt:trace>
                    <sxt:log level="info" location="onStart">
                        <from>'Responder: Catching and dealing with patner error'</from>
                    </sxt:log>
                </sxt:trace>
                <assign name="partnerErrAssign">
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$partnerErrToBackend.ExceptionPart/ns4:Exception/ns4:ThisMessageDateTime</to>
                    </copy>
                </assign>
                <invoke name="invBackendPartnerErr" partnerLink="ToBackend" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" portType="tns:PIP3A20ResponderBackendCallbackPortType" inputVariable="partnerErrToBackend"/>
                <assign name="prepResultPartnerErr">
                    <copy>
                        <from>
                            <literal>AnyProtocolFailure</literal>
                        </from>
                        <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                    </copy>
                </assign>
                <invoke name="invResultPartnerErr" partnerLink="ToMaster" operation="txResultOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" portType="tns:PIP3A20ResponderMasterCallbackPortType" inputVariable="TxResultOpIn"/>
                <exit name="Exit1"/>
            </sequence>
        </catch>
        <catch faultName="procFaults:raDeliveryException">
            <sequence name="raDeliverySeq">
                <assign name="raDeliveryErrAssign">
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$raDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:ThisMessageDateTime</to>
                    </copy>
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$raDeliveryErrToRequestor.ExceptionPart/ns4:ThisMessageDateTime</to>
                    </copy>
                </assign>
                <invoke name="invBackendraDeliveryErr" partnerLink="ToBackend" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" portType="tns:PIP3A20ResponderBackendCallbackPortType" inputVariable="raDeliveryErrToBackend"/>
                <assign name="prepResultRADelErr">
                    <copy>
                        <from>
                            <literal>AnyProtocolFailure</literal>
                        </from>
                        <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                    </copy>
                </assign>
                <invoke name="invResultRADelErr" partnerLink="ToMaster" operation="txResultOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" portType="tns:PIP3A20ResponderMasterCallbackPortType" inputVariable="TxResultOpIn"/>
                <invoke name="invRequestorRaDeliveryErr" partnerLink="ToRequestor" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" portType="tns:PIP3A20RequestorPortType" inputVariable="raDeliveryErrToRequestor"/>
                <exit name="Exit2"/>
            </sequence>
        </catch>
        <catch faultName="procFaults:aaDeliveryException">
            <sequence name="aaDeliverySeq">
                <assign name="aaDeliveryAssign">
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$aaDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:ThisMessageDateTime</to>
                    </copy>
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$aaDeliveryErrToRequestor.ExceptionPart/ns4:ThisMessageDateTime</to>
                    </copy>
                </assign>
                <invoke name="invBackendAaDeliveryErr" partnerLink="ToBackend" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" portType="tns:PIP3A20ResponderBackendCallbackPortType" inputVariable="aaDeliveryErrToBackend"/>
                <assign name="prepResultAADelErr">
                    <copy>
                        <from>
                            <literal>AnyProtocolFailure</literal>
                        </from>
                        <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                    </copy>
                </assign>
                <invoke name="invResultAADelErr" partnerLink="ToMaster" operation="txResultOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" portType="tns:PIP3A20ResponderMasterCallbackPortType" inputVariable="TxResultOpIn"/>
                <invoke name="invRequestoAaDeliveryErr" partnerLink="ToRequestor" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" portType="tns:PIP3A20RequestorPortType" inputVariable="aaDeliveryErrToRequestor"/>
                <exit name="Exit3"/>
            </sequence>
        </catch>

        <catch faultName="procFaults:cancelException">
            <sequence name="backendCancelSeq">
                <assign name="cclAssign">
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$cclErrToRequestor.ExceptionPart/ns4:ThisMessageDateTime</to>
                    </copy>
                </assign>
                <assign name="prepResultBACcl">
                    <copy>
                        <from>
                            <literal>AnyProtocolFailure</literal>
                        </from>
                        <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                    </copy>
                </assign>
                <invoke name="invResultBACcl" partnerLink="ToMaster" operation="txResultOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" portType="tns:PIP3A20ResponderMasterCallbackPortType" inputVariable="TxResultOpIn"/>
                <invoke name="invRequestorCcl" partnerLink="ToRequestor" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" portType="tns:PIP3A20RequestorPortType" inputVariable="cclErrToRequestor"/>
                <exit name="Exit4"/>
            </sequence>
        </catch>
        <catch>
            <sequence name="illegalStateSeq">
                <documentation>this fault will be risen if the backend sends more than one AA or both, an AA and an AAE.</documentation>
                <assign name="illegalStateAssign">
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$illegalStateErrToBackend.ExceptionPart/ns4:Exception/ns4:ThisMessageDateTime</to>
                    </copy>
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$illegalStateErrToRequestor.ExceptionPart/ns4:ThisMessageDateTime</to>
                    </copy>
                </assign>
                <invoke name="invBackendIllegalState" partnerLink="ToBackend" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" portType="tns:PIP3A20ResponderBackendCallbackPortType" inputVariable="illegalStateErrToBackend"/>
                <assign name="prepResultIllegalState">
                    <copy>
                        <from>
                            <literal>AnyProtocolFailure</literal>
                        </from>
                        <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                    </copy>
                </assign>
                <invoke name="invResultIllegalState" partnerLink="ToMaster" operation="txResultOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" portType="tns:PIP3A20ResponderMasterCallbackPortType" inputVariable="TxResultOpIn"/>
                <invoke name="invRequestorIllegalState" partnerLink="ToRequestor" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" portType="tns:PIP3A20RequestorPortType" inputVariable="illegalStateErrToRequestor"/>
                <exit name="Exit5"/>
            </sequence>
        </catch>
        <catch faultName="procFaults:aaException" faultVariable="aaEx" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" faultMessageType="ns3:DropExceptionMsg">
            <documentation>The backend itself creates the aae and consequently does not need to be informed.</documentation>
            <sequence name="aaeSeq">
                <assign name="aaeAssign">
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$aaeToRequestor.ExceptionPart/ns4:ThisMessageDateTime</to>
                    </copy>
                </assign>
                <assign name="prepResultAAE">
                    <copy>
                        <from>
                            <literal>AnyProtocolFailure</literal>
                        </from>
                        <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                    </copy>
                </assign>
                <invoke name="invResultAAE" partnerLink="ToMaster" operation="txResultOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" portType="tns:PIP3A20ResponderMasterCallbackPortType" inputVariable="TxResultOpIn"/>
                <invoke name="invRequestorAae" partnerLink="ToRequestor" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" portType="tns:PIP3A20RequestorPortType" inputVariable="aaeToRequestor"/>
                <exit name="Exit6"/>
            </sequence>
        </catch>
        <catch faultName="procFaults:raException">
            <documentation>Either the backend has not been invoked or the delivery of the bizDoc caused an error.
Hence, the backend does not get invoked here.</documentation>
            <sequence name="raeSeq">
                <assign name="raeAssign">
                    <copy>
                        <from>sxxf:current-dateTime()</from>
                        <to>$raeToRequestor.ExceptionPart/ns4:ThisMessageDateTime</to>
                    </copy>
                </assign>
                <assign name="prepResultRAE">
                    <copy>
                        <from>
                            <literal>AnyProtocolFailure</literal>
                        </from>
                        <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                    </copy>
                </assign>
                <invoke name="invResultRAE" partnerLink="ToMaster" operation="txResultOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" portType="tns:PIP3A20ResponderMasterCallbackPortType" inputVariable="TxResultOpIn"/>
                <invoke name="invRequestorRae" partnerLink="ToRequestor" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" portType="tns:PIP3A20RequestorPortType" inputVariable="raeToRequestor"/>
                <exit name="Exit7"/>
            </sequence>
        </catch>
    </faultHandlers>
    <sequence>
        <scope name="mainScope">
            <variables>
                <variable name="aaArrived" type="xsd:boolean"/>
                <variable name="dropAA" messageType="ns3:DropAcceptanceAcknowledgementMsg"/>
                <variable name="raToDeliver" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" messageType="tns:ReceiptAcknowledgementMsg"/>
                <variable name="DropRAEOpIn" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRACResult" messageType="tns:DropExceptionMsg"/>
                <variable name="DropReceiptAcknowledgementOpIn" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRACResult" messageType="tns:DropReceiptAcknowledgementMsg"/>
                <variable name="bizDocToValidate"  xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRAC" messageType="tns:Pip3A20PurchaseOrderConfirmationNotificationMsg"/>
            </variables>
            <eventHandlers>
                <onEvent partnerLink="FromRequestor" operation="ExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20Responder" portType="tns:PIP3A20ResponderPortType" variable="requestorErr" messageType="tns:ExceptionMsg">
                    <correlations>
                        <correlation set="corrSetTransaction" initiate="no"/>
                    </correlations>
                    <scope name="DealWithRequestorErr">
                        <sxt:trace>
                            <sxt:log level="info" location="onStart">
                                <from>'Responder: got exception from partner in globalOnEvent'</from>
                            </sxt:log>
                        </sxt:trace>
                        <sequence name="PartnerExSeq">
                            <assign name="prepPartnerErr">
                                <copy>
                                    <from variable="requestorErr" part="ExceptionPart"/>
                                    <to>$partnerErrToBackend.ExceptionPart/ns4:Exception</to>
                                </copy>
                            </assign>
                            <throw name="throwPartnerEx" faultName="procFaults:partnerException"/>
                        </sequence>
                    </scope>
                </onEvent>
            </eventHandlers>
            <sequence name="mainSeq">
                <scope name="startScope">
                    <variables>
                        <variable name="bizDocToDeliver" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" messageType="tns:Pip3A20PurchaseOrderConfirmationNotificationMsg"/>
                    </variables>
                    <sequence name="startSeq">
                        <receive name="recStart" createInstance="yes" partnerLink="FromMaster" operation="txStartOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterClient" portType="tns:PIP3A20ResponderMasterClientPortType" variable="TxStartOpIn">
                            <correlations>
                                <correlation set="corrSetTransaction" initiate="yes"/>
                            </correlations>
                        </receive>
                        <receive name="recBizDoc" createInstance="no" partnerLink="FromRequestor" operation="Pip3A20PurchaseOrderConfirmationNotificationOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20Responder" portType="tns:PIP3A20ResponderPortType" variable="Pip3A20PurchaseOrderConfirmationNotificationOpIn">
                            <sxt:trace>
                                <sxt:log level="info" location="onComplete">
                                    <from>'Responder: Got bizDoc'</from>
                                </sxt:log>
                            </sxt:trace>
                            <correlations>
                                <correlation set="corrSetTransaction" initiate="no"/>
                            </correlations>
                        </receive>
                        <assign name="initVars">
                            <sxt:trace>
                                <sxt:log level="info" location="onStart">
                                    <from>'Responder: Starting variable initialization'</from>
                                </sxt:log>
                            </sxt:trace>
                            <copy>
                                <from>3</from>
                                <to variable="maxRetries"/>
                            </copy>
                            <copy>
                                <from>0</from>
                                    <to variable="errCount"/>
                            </copy>
                            <copy>
                                <from>false()</from>
                                    <to variable="raDelivery"/>
                            </copy>
                            <copy>
                                <from>false()</from>
                                    <to variable="aaDelivery"/>
                            </copy>
                            <copy>
                                <from>false()</from>
                                <to variable="aaArrived"/>
                            </copy>
                            <copy>
                                <from>false()</from>
                                <to variable="mainScopeSuccess"/>
                            </copy>
                        </assign>
                        <assign name="initIdDependentVars">
                            <copy>
                                <from variable="Pip3A20PurchaseOrderConfirmationNotificationOpIn" part="Pip3A20PurchaseOrderConfirmationNotificationPart"/>
                                <to>$bizDocToValidate.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:Pip3A20PurchaseOrderConfirmationNotification</to>
                            </copy>
                             <!-- BEGIN init partnerErrToBackend -->
                            <copy>
                                <from>$TxStartOpIn.txStartPart/ns1:TransactionMetaBlock</from>
                                <to>$partnerErrToBackend.ExceptionPart/ns1:TransactionMetaBlock</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$partnerErrToBackend.ExceptionPart/ns4:Exception/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$partnerErrToBackend.ExceptionPart/ns4:Exception/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$partnerErrToBackend.ExceptionPart/ns4:Exception/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'The partner detected an error'</from>
                                <to>$partnerErrToBackend.ExceptionPart/ns4:Exception/ns4:Reason</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>PartnerError</literal>
                                </from>
                                <to>$partnerErrToBackend.ExceptionPart/ns4:Exception/ns4:ExceptionType/ns4:GeneralException</to>
                            </copy>
                            <!-- END init partnerErrToBackend -->
                             <!-- BEGIN init raDeliveryErrToBackend -->
                            <copy>
                                <from>$TxStartOpIn.txStartPart/ns1:TransactionMetaBlock</from>
                                <to>$raDeliveryErrToBackend.ExceptionPart/ns1:TransactionMetaBlock</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$raDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$raDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$raDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'ReceiptAcknowledgement could not be delivered to partner'</from>
                                <to>$raDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:Reason</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>ReceiptAckDeliveryError</literal>
                                </from>
                                <to>$raDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:ExceptionType/ns4:GeneralException</to>
                            </copy>
                            <!-- END init raDeliveryErrToBackend -->
                            <!-- BEGIN init aaDeliveryErrToBackend -->
                            <copy>
                                <from>$TxStartOpIn.txStartPart/ns1:TransactionMetaBlock</from>
                                <to>$aaDeliveryErrToBackend.ExceptionPart/ns1:TransactionMetaBlock</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$aaDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$aaDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$aaDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'AcceptanceAcknowledgement could not be delivered to partner'</from>
                                <to>$aaDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:Reason</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>AcceptanceAckDeliveryError</literal>
                                </from>
                                <to>$aaDeliveryErrToBackend.ExceptionPart/ns4:Exception/ns4:ExceptionType/ns4:GeneralException</to>
                            </copy>
                            <!-- END init aaDeliveryErrToBackend -->
                            <!-- BEGIN init illegalStateErrToBackend -->
                            <copy>
                                <from>$TxStartOpIn.txStartPart/ns1:TransactionMetaBlock</from>
                                <to>$illegalStateErrToBackend.ExceptionPart/ns1:TransactionMetaBlock</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$illegalStateErrToBackend.ExceptionPart/ns4:Exception/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$illegalStateErrToBackend.ExceptionPart/ns4:Exception/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$illegalStateErrToBackend.ExceptionPart/ns4:Exception/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'Backend accessed control process in a illegitimate way. Beware of sending AAs multiple times or both AAs and AAEs'</from>
                                <to>$illegalStateErrToBackend.ExceptionPart/ns4:Exception/ns4:Reason</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>IllegalStateError</literal>
                                </from>
                                <to>$illegalStateErrToBackend.ExceptionPart/ns4:Exception/ns4:ExceptionType/ns4:GeneralException</to>
                            </copy>
                            <!-- END init illegalStateErrToBackend -->
                            <!-- BEGIN init raDeliveryErrToRequestor -->
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$raDeliveryErrToRequestor.ExceptionPart/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$raDeliveryErrToRequestor.ExceptionPart/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$raDeliveryErrToRequestor.ExceptionPart/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'ReceiptAcknowledgement could not be delivered to requestor (that is probably you). Terminating process'</from>
                                <to>$raDeliveryErrToRequestor.ExceptionPart/ns4:Reason</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>ReceiptAckDeliveryError</literal>
                                </from>
                                <to>$raDeliveryErrToRequestor.ExceptionPart/ns4:ExceptionType/ns4:GeneralException</to>
                            </copy>
                            <!-- END init raDeliveryErrToRequestor -->
                            <!-- BEGIN init aaDeliveryErrToRequestor -->
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$aaDeliveryErrToRequestor.ExceptionPart/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$aaDeliveryErrToRequestor.ExceptionPart/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$aaDeliveryErrToRequestor.ExceptionPart/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'AcceptanceAcknowledgement could not be delivered to requestor (that is probably you). Terminating process'</from>
                                <to>$aaDeliveryErrToRequestor.ExceptionPart/ns4:Reason</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>AcceptanceAckDeliveryError</literal>
                                </from>
                                <to>$aaDeliveryErrToRequestor.ExceptionPart/ns4:ExceptionType/ns4:GeneralException</to>
                            </copy>
                            <!-- END init aaDeliveryErrToRequestor -->
                            <!-- BEGIN init cclErrToRequestor -->
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$cclErrToRequestor.ExceptionPart/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$cclErrToRequestor.ExceptionPart/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$cclErrToRequestor.ExceptionPart/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'The business transaction has been canceled'</from>
                                <to>$cclErrToRequestor.ExceptionPart/ns4:Reason</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>Cancelation</literal>
                                </from>
                                <to>$cclErrToRequestor.ExceptionPart/ns4:ExceptionType/ns4:GeneralException</to>
                            </copy>
                            <!-- END init cclErrToRequestor -->
                            <!-- BEGIN init illegalStateErrToRequestor -->
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$illegalStateErrToRequestor.ExceptionPart/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$illegalStateErrToRequestor.ExceptionPart/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$illegalStateErrToRequestor.ExceptionPart/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'The business transaction has been terminated'</from>
                                <to>$illegalStateErrToRequestor.ExceptionPart/ns4:Reason</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>ExecutionError</literal>
                                </from>
                                <to>$illegalStateErrToRequestor.ExceptionPart/ns4:ExceptionType/ns4:GeneralException</to>
                            </copy>
                            <!-- END init illegalStateErrToRequestor -->
                            <!-- BEGIN init aaeToRequestor -->
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$aaeToRequestor.ExceptionPart/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$aaeToRequestor.ExceptionPart/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$aaeToRequestor.ExceptionPart/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'AcceptanceAcknowledgementException'</from>
                                <to>$aaeToRequestor.ExceptionPart/ns4:Reason</to>
                            </copy>
                            <!-- END init aaeToRequestor -->
                            <!-- BEGIN init raeToRequestor -->
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$raeToRequestor.ExceptionPart/ns4:OriginalMessageIdentifier</to>
                            </copy>
                            <copy>
                                <from>$Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentGenerationDateTime/ns2:DateTimeStamp</from>
                                <to>$raeToRequestor.ExceptionPart/ns4:OriginalMessageDateTime</to>
                            </copy>
                            <copy>
                                <from>string($Pip3A20PurchaseOrderConfirmationNotificationOpIn.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:thisDocumentIdentifier/ns2:ProprietaryDocumentIdentifier)</from>
                                <to>$raeToRequestor.ExceptionPart/ns4:CollaborationIdentifier</to>
                            </copy>
                            <copy>
                                <from>'ReceiptAcknowledgementException'</from>
                                <to>$raeToRequestor.ExceptionPart/ns4:Reason</to>
                            </copy>
                            <!-- END init raeToRequestor -->
                            <copy>
                                <from>
                                    <literal>Performance</literal>
                                </from>
                                <to>$aaeToRequestor.ExceptionPart/ns4:ExceptionType/ns4:AcceptanceException</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>Syntax</literal>
                                </from>
                                <to>$raeToRequestor.ExceptionPart/ns4:ExceptionType/ns4:ReceiptException</to>
                            </copy>
                            <copy>
                                <from>$TxStartOpIn.txStartPart/ns1:TransactionMetaBlock</from>
                                <to>$TxResultOpIn.txResultPart/ns1:TransactionMetaBlock</to>
                            </copy>
                            <copy>
                                <from>
                                    <literal>Failure</literal>
                                </from>
                                <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                            </copy>
                            <copy>
                                <from>$TxStartOpIn.txStartPart/ns1:TransactionMetaBlock</from>
                                <to>$bizDocToValidate.Pip3A20PurchaseOrderConfirmationNotificationPart/ns1:TransactionMetaBlock</to>
                            </copy>
                            <copy>
                                <from>$TxStartOpIn.txStartPart/ns1:TransactionMetaBlock</from>
                                <to>$bizDocToDeliver.Pip3A20PurchaseOrderConfirmationNotificationPart/ns1:TransactionMetaBlock</to>
                            </copy>
                        </assign>
                        <invoke name="invBizDocValid" partnerLink="ToRAC" operation="ValidatePip3A20PurchaseOrderConfirmationNotificationOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRAC" portType="tns:PIP3A20ResponderRACPortType" inputVariable="bizDocToValidate">
                            <sxt:trace>
                                <sxt:log level="info" location="onStart">
                                    <from>'Responder: Invoking BizDoc Validation'</from>
                                </sxt:log>
                            </sxt:trace>
                        </invoke>
                        <pick name="raRaePick">
                            <onMessage partnerLink="FromRAC" operation="DropReceiptAcknowledgementOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRACResult" portType="tns:PIP3A20ResponderRACResultPortType" variable="DropReceiptAcknowledgementOpIn">
                                <correlations>
                                    <correlation set="corrSetTransaction" initiate="no"/>
                                </correlations>
                                <sequence name="OnRaSeq">
                                    <assign name="prepRA">
                                        <sxt:trace>
                                            <sxt:log level="info" location="onStart">
                                                <from>'Responder: GotRA'</from>
                                            </sxt:log>
                                        </sxt:trace>
                                        <copy>
                                            <from>$DropReceiptAcknowledgementOpIn.DropReceiptAcknowledgementPart/ns4:ReceiptAcknowledgement</from>
                                            <to variable="raToDeliver" part="ReceiptAcknowledgementPart"/>
                                        </copy>
                                    </assign>
                                </sequence>
                            </onMessage>
                            <onMessage partnerLink="FromRAC" operation="DropExceptionOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderRACResult" portType="tns:PIP3A20ResponderRACResultPortType" variable="DropRAEOpIn">
                                <correlations>
                                    <correlation set="corrSetTransaction" initiate="no"/>
                                </correlations>
                                <sequence name="RAESeq">
                                    <documentation>strictly speaking, validity of RAE should be checked here, i.e., the exception type</documentation>
                                    <assign name="prepRAE">
                                        <sxt:trace>
                                            <sxt:log level="info" location="onStart">
                                                <from>'Responder: Got RAE'</from>
                                            </sxt:log>
                                        </sxt:trace>
                                        <copy>
                                            <from>$DropRAEOpIn.DropExceptionPart/ns4:Exception</from>
                                            <to variable="raeToRequestor" part="ExceptionPart"/>
                                        </copy>
                                    </assign>
                                    <throw name="throwRaRac" faultName="procFaults:raException"/>
                                </sequence>
                            </onMessage>
                        </pick>
                        <scope name="deliverBizDocScope">
                            <faultHandlers>
                                <catchAll>
                                    <sequence name="DealWithBizDocDeliveryError">
                                        <empty name="Init-data-ok">
                                            <documentation>Actually this type of exception is not truly a ReceiptException</documentation>
                                        </empty>
                                        <throw name="throwRABackend" faultName="procFaults:raException"/>
                                    </sequence>
                                </catchAll>
                            </faultHandlers>
                            <sequence name="Sequence1">
                                <assign name="prepBizDoc">
                                    <copy>
                                        <from variable="Pip3A20PurchaseOrderConfirmationNotificationOpIn" part="Pip3A20PurchaseOrderConfirmationNotificationPart"/>
                                        <to>$bizDocToDeliver.Pip3A20PurchaseOrderConfirmationNotificationPart/ns2:Pip3A20PurchaseOrderConfirmationNotification</to>
                                    </copy>
                                </assign>
                                <invoke name="invDeliverBizDoc" partnerLink="ToBackend" operation="Pip3A20PurchaseOrderConfirmationNotificationOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" portType="tns:PIP3A20ResponderBackendCallbackPortType" inputVariable="bizDocToDeliver">
                                    <sxt:trace>
                                        <sxt:log level="info" location="onStart">
                                            <from>'Responder: Invoking Bizdoc Delivery'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                </invoke>
                            </sequence>
                        </scope>
                    </sequence>
                </scope>
                <scope name="deliverRAScope">
                    <eventHandlers>
                        <onEvent partnerLink="FromBackend" operation="txCancelOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendClient" portType="tns:PIP3A20ResponderBackendClientPortType" variable="cclMsg" messageType="tns:txCancelMsg">
                            <correlations>
                                <correlation set="corrSetTransaction" initiate="no"/>
                            </correlations>
                            <scope name="DealWithBackendCancelSeq">
                                <throw name="throwBackendCancel" faultName="procFaults:cancelException">
                                    <sxt:trace>
                                        <sxt:log level="info" location="onStart">
                                            <from>'Responder: Handling backned cancel'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                </throw>
                            </scope>
                        </onEvent>
                        <onEvent partnerLink="FromBackend" operation="DropAcceptanceAcknowledgementOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendClient" portType="tns:PIP3A20ResponderBackendClientPortType" variable="aaEventMsg" messageType="tns:DropAcceptanceAcknowledgementMsg">
                            <correlations>
                                <correlation set="corrSetTransaction" initiate="no"/>
                            </correlations>
                            <scope name="DealWithAAScope">
                                <sxt:trace>
                                    <sxt:log level="info" location="onStart">
                                        <from>'Responder: Dealing with AA in parallel'</from>
                                    </sxt:log>
                                </sxt:trace>
                                <sequence name="DealWithAASeq">
                                    <if name="IfAaPerformedBefore">
                                        <condition>$aaArrived</condition>
                                        <throw name="throwIllegalSate" faultName="procFaults:illegalStateException"/>
                                    </if>
                                    <assign name="saveAA">
                                        <copy>
                                                <from variable="aaEventMsg" part="DropAcceptanceAcknowledgementPart"/>
                                                    <to variable="dropAA" part="DropAcceptanceAcknowledgementPart"/>
                                            </copy>
                                            <copy>
                                                <from>true()</from>
                                                    <to variable="aaArrived"/>
                                            </copy>
                                    </assign>
                                </sequence>
                            </scope>
                        </onEvent>
                        <onEvent partnerLink="FromBackend" operation="DropExceptionOp" portType="ns3:PIP3A20ResponderBackendClientPortType" variable="aaeEventMsg" messageType="ns3:DropExceptionMsg">
                            <correlations>
                                <correlation set="corrSetTransaction" initiate="no"/>
                            </correlations>
                            <scope name="DealWithAAEScope">
                                <sxt:trace>
                                    <sxt:log level="info" location="onStart">
                                        <from>'Responder: Dealing with rae in parallel'</from>
                                    </sxt:log>
                                </sxt:trace>
                                <sequence name="DealWithAAESeq">
                                    <if name="IfAaPerformedBefore">
                                        <condition>$aaArrived</condition>
                                        <throw name="throwIllegalSate" faultName="procFaults:illegalStateException"/>
                                    </if>
                                    <assign name="prepAAE">
                                        <copy>
                                            <from>$aaeEventMsg.DropExceptionPart/ns4:Exception</from>
                                            <to variable="aaeToRequestor" part="ExceptionPart"/>
                                        </copy>
                                    </assign>
                                    <throw name="throwAAE" faultVariable="aaeEventMsg" faultName="procFaults:aaException"/>
                                </sequence>
                            </scope>
                        </onEvent>
                    </eventHandlers>
                    <while name="raDeliveryWhile">
                        <condition>not($raDelivery)</condition>
                        <scope name="raDeliveryScope">
                            <faultHandlers>
                                <catch faultName="sxeh:systemFault">
                                    <sequence name="raErrCountSeq">
                                        <assign name="raIncErrCount">
                                            <sxt:trace>
                                                <sxt:log level="info" location="onStart">
                                                    <from>'Responder: caught error during ra delivery'</from>
                                                </sxt:log>
                                            </sxt:trace>
                                            <copy>
                                                    <from>$errCount + 1</from>
                                                        <to variable="errCount"/>
                                                </copy>
                                        </assign>
                                        <if name="If1">
                                            <condition>$errCount &gt;= $maxRetries</condition>
                                            <throw name="throwRADelError" faultName="procFaults:raDeliveryException"/>
                                            <else>
                                                <wait name="rabackOff">
                                                    <for>'P0Y0M0DT0H0M60.0S'</for>
                                                </wait>
                                            </else>
                                        </if>
                                    </sequence>
                                </catch>
                            </faultHandlers>
                            <sequence name="raDeliverySeq">
                                <invoke name="invSendRA" partnerLink="ToRequestor" operation="ReceiptAcknowledgementOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" portType="tns:PIP3A20RequestorPortType" inputVariable="raToDeliver">
                                    <sxt:trace>
                                        <sxt:log level="info" location="onStart">
                                            <from>'Responder: Invoking RA Delivery'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                    <correlations>
                                            <correlation set="corrSetTransaction" initiate="no"/>
                                        </correlations>
                                </invoke>
                                <assign name="assignRaSuccess">
                                    <copy>
                                        <from>true()</from>
                                        <to variable="raDelivery"/>
                                    </copy>
                                    <copy>
                                        <from>0</from>
                                        <to variable="errCount"/>
                                    </copy>
                                </assign>
                            </sequence>
                        </scope>
                    </while>
                </scope>
                <if name="IfNotAADone">
                    <condition>not($aaArrived)</condition>
                    <scope name="getAAScope">
                        <variables>
                            <variable name="aaePickMsg" messageType="ns3:DropExceptionMsg"/>
                            <variable name="cancelEventMsg" messageType="ns3:txCancelMsg"/>
                        </variables>
                        <pick name="aaPick" createInstance="no">
                            <sxt:trace>
                                <sxt:log level="info" location="onStart">
                                    <from>'Responder: Pick started'</from>
                                </sxt:log>
                            </sxt:trace>
                            <onMessage partnerLink="FromBackend" operation="DropAcceptanceAcknowledgementOp" portType="ns3:PIP3A20ResponderBackendClientPortType" variable="dropAA">
                                <correlations>
                                    <correlation set="corrSetTransaction" initiate="no"/>
                                </correlations>
                                <assign name="assAAArrived">
                                    <sxt:trace>
                                        <sxt:log level="info" location="onStart">
                                            <from>'Responder: picked aa'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                    <copy>
                                        <from>true()</from>
                                        <to variable="aaArrived"/>
                                    </copy>
                                </assign>
                            </onMessage>
                            <onMessage partnerLink="FromBackend" operation="txCancelOp" portType="ns3:PIP3A20ResponderBackendClientPortType" variable="cancelEventMsg">
                                <correlations>
                                    <correlation set="corrSetTransaction" initiate="no"/>
                                </correlations>
                                <throw name="throwBackendCancel" faultName="procFaults:cancelException">
                                    <sxt:trace>
                                        <sxt:log level="info" location="onStart">
                                            <from>'Responder: picked cancel message'</from>
                                        </sxt:log>
                                    </sxt:trace>
                                </throw>
                            </onMessage>
                            <onMessage partnerLink="FromBackend" operation="DropExceptionOp" portType="ns3:PIP3A20ResponderBackendClientPortType" variable="aaePickMsg">
                                <documentation>Note: the exception message actually would have to be checked for really being an aae (confer above)</documentation>
                                <correlations>
                                    <correlation set="corrSetTransaction" initiate="no"/>
                                </correlations>
                                <sequence name="aaeCase">
                                    <assign name="prepAAE">
                                        <sxt:trace>
                                            <sxt:log level="info" location="onStart">
                                                <from>'Responder: picked aae'</from>
                                            </sxt:log>
                                        </sxt:trace>
                                        <copy>
                                            <from>$aaePickMsg.DropExceptionPart/ns4:Exception</from>
                                            <to variable="aaeToRequestor" part="ExceptionPart"/>
                                        </copy>
                                    </assign>
                                    <throw name="throwAAE" faultVariable="aaePickMsg" faultName="procFaults:aaException"/>
                                </sequence>
                            </onMessage>
                        </pick>
                    </scope>
                </if>
                <scope name="deliverAAScope">
                    <variables>
                        <variable name="aaToDeliver" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" messageType="tns:AcceptanceAcknowledgementMsg"/>
                    </variables>
                    <sequence name="deliverAASeq">
                        <assign name="Assign1">
                            <copy>
                                <from>$dropAA.DropAcceptanceAcknowledgementPart/ns4:AcceptanceAcknowledgement</from>
                                <to variable="aaToDeliver" part="AcceptanceAcknowledgementPart"/>
                            </copy>
                        </assign>
                        <while name="aaDeliveryWhile" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor">
                            <condition>not($aaDelivery)</condition>
                                <scope name="aaDeliveryScope">
                                    <faultHandlers>
                                            <catch faultName="sxeh:systemFault">
                                                    <sequence name="aaErrCountSeq">
                                                            <assign name="aaIncErrCount">
                                                                <sxt:trace>
                                                                    <sxt:log level="info" location="onStart">
                                                                        <from>'Responder: dealing with aae delivery error'</from>
                                                                    </sxt:log>
                                                                </sxt:trace>
                                                                <copy>
                                                                            <from>$errCount + 1</from>
                                                                                <to variable="errCount"/>
                                                                        </copy>
                                                                </assign>
                                                                <if name="IfAAErrorExceed">
                                                                    <condition>$errCount &gt;= $maxRetries</condition>
                                                                        <throw name="throwAADelError" faultName="procFaults:aaDeliveryException"/>
                                                                        <else>
                                                                            <wait name="aabackOff">
                                                                                    <for>'P0Y0M0DT0H0M60.0S'</for>
                                                                                </wait>
                                                                        </else>
                                                                </if>
                                                        </sequence>
                                                </catch>
                                        </faultHandlers>
                                        <sequence name="aaDeliverySeq">
                                            <invoke name="invSendAA" partnerLink="ToRequestor" operation="AcceptanceAcknowledgementOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Requestor/PIP3A20Requestor" portType="tns:PIP3A20RequestorPortType" inputVariable="aaToDeliver">
                                                <sxt:trace>
                                                    <sxt:log level="info" location="onStart">
                                                        <from>'Responder: invoking aa delivery'</from>
                                                    </sxt:log>
                                                </sxt:trace>
                                                <correlations>
                                                    <correlation set="corrSetTransaction" initiate="no"/>
                                                </correlations>
                                                </invoke>
                                                <assign name="assignAaSuccess">
                                                    <copy>
                                                            <from>true()</from>
                                                                <to variable="aaDelivery"/>
                                                        </copy>
                                                        <copy>
                                                            <from>0</from>
                                                                <to variable="errCount"/>
                                                        </copy>
                                                </assign>
                                        </sequence>
                                </scope>
                        </while>
                    </sequence>
                </scope>
                <assign name="mainScopeSuccess">
                    <copy>
                        <from>true()</from>
                        <to variable="mainScopeSuccess"/>
                    </copy>
                </assign>
            </sequence>
        </scope>
        <if name="IfMainScopeSuccess">
            <condition>$mainScopeSuccess</condition>
            <scope name="finalizeScope">
                <sxt:trace>
                    <sxt:log level="info" location="onStart">
                        <from>'Responder: Beginning finalization'</from>
                    </sxt:log>
                </sxt:trace>
                <variables>
                    <variable name="persistMsg" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" messageType="tns:txPersistMsg"/>
                </variables>
                <sequence name="finalizeSeq">
                    <assign name="prepPersist">
                        <copy>
                            <from>$TxStartOpIn.txStartPart/ns1:TransactionMetaBlock</from>
                            <to>$persistMsg.txPersistPart/ns1:TransactionMetaBlock</to>
                        </copy>
                    </assign>
                    <invoke name="invPersist" partnerLink="ToBackend" operation="txPersistOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderBackendCallback" portType="tns:PIP3A20ResponderBackendCallbackPortType" inputVariable="persistMsg"/>
                    <assign name="prepResultSucc">
                        <copy>
                            <from>
                                <literal>ProtocolSuccess</literal>
                            </from>
                            <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                        </copy>
                        <copy>
                            <from variable="Pip3A20PurchaseOrderConfirmationNotificationOpIn" part="Pip3A20PurchaseOrderConfirmationNotificationPart"/>
                            <to>$TxResultOpIn.txResultPart/ns2:Pip3A20PurchaseOrderConfirmationNotification</to>
                        </copy>
                    </assign>
                    <invoke name="invResultSucc" partnerLink="ToMaster" operation="txResultOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" portType="tns:PIP3A20ResponderMasterCallbackPortType" inputVariable="TxResultOpIn"/>
                </sequence>
            </scope>
            <else>
                <sequence name="mainProcErrSeq">
                    <assign name="prepResultMainErr">
                        <sxt:trace>
                            <sxt:log level="info" location="onStart">
                                <from>'Main Scope Failure detected in finalizeScope'</from>
                            </sxt:log>
                        </sxt:trace>
                        <copy>
                            <from>
                                <literal>AnyProtocolFailure</literal>
                            </from>
                            <to>$TxResultOpIn.txResultPart/ns5:genericProtocolResult</to>
                        </copy>
                    </assign>
                    <invoke name="invResultMainErr" partnerLink="ToMaster" operation="txResultOp" xmlns:tns="http://lspi.wiai.uniba.de/ebBP-prototype/wsdl/composablePIP3A20Responder/PIP3A20ResponderMasterCallback" portType="tns:PIP3A20ResponderMasterCallbackPortType" inputVariable="TxResultOpIn"/>
                </sequence>
            </else>
        </if>
    </sequence>
</process>













